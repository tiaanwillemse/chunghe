
<!doctype html>

<html>
<head>
<style>
  :root { }
</style>
</head>
<body>
<div id="app"></div>
<script src="./lib/react.js"></script>
<script src="./lib/babel-browser.js"></script>
<script type="text/babel">
/*
important: component composition
onSubmit/onChange is actually synthetic event, not really native DOM event
@props.items.map to render multiple todo itms
only need to tell React how to render the application, there's no direct dom access to render the ui (no innerHTML or something)

get setting `ref` attribute, could access the node through this.refs['input'], no parentNode, no getElementById, no queryselector
could get the native DOM node through getDOMNode() method on the virtual DOM
*/

class TodoList extends React.Component {
  createItem(itemText, index) {
    return <li key={index}>{itemText}</li>;
  }

  render() {
    return <ul>{this.props.items.map(this.createItem)}</ul>
  }
}

class TodoApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {items:[], text: ""}
  }

  onChange(e) {
    this.setState({text: e.target.value});
  }

  handleSubmit(e) {
    e.preventDefault();
    var nextItems = this.state.items.concat([this.state.text]);
    this.setState({items: nextItems, text: ''});
  }

  render() {
    return (
      <div>
        <h3>TODO</h3>
        <TodoList items={this.state.items} />
        <form onSubmit={this.handleSubmit.bind(this)}>
          <input onChange={this.onChange.bind(this)} value={this.state.text} />
          <button>Add</button>
        </form>
      </div>
    
    )
  }
}

React.render(<TodoApp  />, document.querySelector('#app'));
</script>
</body>
</html>
