
<!doctype html>

<html>
<head>
<style>
.module { border: 1px solid #ccc; padding: 1em;}
</style>
</head>
<body>
<div id="app"></div>
<script src="lib/build/react.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/coffee-script/1.6.3/coffee-script.min.js"></script>
<script type="text/coffeescript">

# this.setState(text: e.target.value) <- can only modify part of the state
# onSubmit/onChange is actually synthetic event, not really native DOM event
# @props.items.map is a common pattern
# only need to tell React how to render the application, there's no direct dom access to render the ui (no innerHTML or something)
# very easy to do subview management
# get setting `ref` attribute, could access the node through this.refs['input'], no parentNode, no getElementById, no queryselector
# could get the native DOM node through getDOMNode() method on the virtual DOM

{div, input, form, button, h3, ul, li} = React.DOM

TodoList = React.createClass(
  render: ->
    ul null, @props.items.map((itemText) ->
      li null, itemText
    )
)

TodoApp = React.createClass(

  getInitialState: ->
    items: [], text: ''

  onChange: (e) ->
    this.setState(text: e.target.value)

  handleSubmit: (e) ->
    e.preventDefault()
    nextItems = this.state.items.concat([this.state.text])
    @setState(items: nextItems, text: '')
    this.refs.input.getDOMNode().focus()

  render: ->
    div null, [
      h3 null, 'TODO'
      TodoList {items: @state.items}
      form {onSubmit: @handleSubmit}, [
        input {onChange: @onChange, ref: 'input', value: this.state.text}
        button null, "add ##{@state.items.length + 1}"
      ]
    ]
)

React.renderComponent(TodoApp(null), document.querySelector('#app'))
</script>
</body>
</html>
