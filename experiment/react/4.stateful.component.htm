
<!doctype html>

<html>
<head>
<style>
.module { border: 1px solid #ccc; padding: 1em;}
</style>
</head>
<body>
<div id="app"></div>

<script src="./lib/react.js"></script>
<script src="./lib/babel-browser.js"></script>
<script type="text/babel">

/*
   initialCount passed as props for the Counter component
   this.state to set the initial internal state
   set set via @setState, should never modify the state directly

   component lifecycle: 
    1. Mounting: componentWillMount
    2. Mounting: componentDidMount
    3. Updating: componentWillReceiveProps
    4. Updating: shouldComponentUpdate
    5. Updating: componentWillUpdate
    6. Updating: componentDidUpdate
    7. Unmounting: componentWillUnmount
  only have to think about user interface and data structure (count is the only state needed for this app)
*/


class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {count: +props.initialCount}
  }

  tick() {
    this.setState({count: this.state.count + 1});
  }

  componentDidMount() {
    this.interval = setInterval(this.tick.bind(this), 1000);
  }

  render() {
    return (
      <div> Seconds Elapsed: {this.state.count}</div>
    );
  }
}
React.render(<Counter initialCount="0" />, document.body);
</script>
</body>
</html>
